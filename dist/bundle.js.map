{"version":3,"file":"bundle.js","sources":["../src/index.ts"],"sourcesContent":["interface IPerson {\r\n  name: string;\r\n  age: string;\r\n}\r\ninterface IAnimal {\r\n  name: string;\r\n  age: string;\r\n  address: string;\r\n}\r\n\r\nlet person!: IPerson;\r\n// let animal!: IAnimal;\r\n// person = animal;\r\n\r\nlet s1 = (a: string, b: string) => a + b;\r\nlet s2 = (a: string) => a;\r\ns1 = s2;\r\n\r\nfunction fn(callback: (instance: Child) => Child) {\r\n  let child = new Child();\r\n  let ins = callback(child);\r\n  return ins;\r\n}\r\n\r\nclass Parent {\r\n  house() {}\r\n}\r\nclass Child extends Parent {\r\n  car() {}\r\n}\r\nclass Grandson extends Child {\r\n  money() {}\r\n}\r\n\r\nlet t1: (instance: Child) => void = (instance: Parent) => \"\"; //函数的参数是逆变的\r\nlet t2: (instance: Child) => Child = (instance: Child) => new Grandson(); //函数的参数是协变的\r\n\r\nfn((instance: Parent) => {\r\n  instance.house();\r\n  return new Child();\r\n});\r\n\r\ntype Arg<T> = (arg: T) => void;\r\ntype Return<T> = (arg: any) => T;\r\ntype ArgType = Arg<Parent> extends Arg<Child> ? true : false; //逆变\r\ntype ReturnType = Return<Grandson> extends Return<Child> ? true : false; //逆变\r\nexport {};\r\n\r\ninterface MyArray<T> {\r\n  concat1(...args: T[]): T[]; //不会对参数进行逆变检测\r\n  concat2: (...args: T[]) => void; //会对检测逆变，这种方式不推荐\r\n}\r\n\r\nlet arr1!: MyArray<Parent>;\r\nlet arr2!: MyArray<Child>;\r\n// arr1 = arr2;\r\n\r\n// const classDecorator = <T extends new (...args: any[]) => any>(target: T) => {\r\n//   (target as any).type = \"动物\";\r\n//   (target as any).getType = function () {\r\n//     return this.type;\r\n//   };\r\n//   Object.assign(target.prototype, {\r\n//     eat() {},\r\n//     drink() {},\r\n//   });\r\n// };\r\n\r\n// @classDecorator\r\n// class Animal {}\r\n// console.log(typeof Animal); //function\r\n// console.log((Animal as any).getType());\r\n// const animal = new Animal();\r\n// console.log(animal);\r\n\r\n// function OverrideAnimal(target: any) {\r\n//   return class extends target {\r\n//     eat() {\r\n//       super.eat();\r\n//       console.log(\"new eat\");\r\n//     }\r\n//   };\r\n// }\r\n\r\nfunction Enum(isEnum: boolean): MethodDecorator {\r\n  return function (target, property, descriptor) {\r\n    //descriptor.enumerable 是否可枚举\r\n    //descriptor.writable 是否可被重写\r\n    //descriptor.configurable 是否可被删除\r\n    //descriptor.value 当前值\r\n    descriptor.enumerable = isEnum;\r\n    let original = descriptor.value as any;\r\n    descriptor.value = function () {\r\n      console.log(\"prev eat\");\r\n      return original(...arguments);\r\n    } as any;\r\n  };\r\n}\r\n\r\n// class Animal {\r\n\r\n//   @Enum(true)\r\n//   eat() {\r\n//     console.log(\"animal original\");\r\n//   }\r\n// }\r\n\r\n// function ToUpper(isUpper: boolean): PropertyDecorator {\r\n//   return function (target, property, descriptor) {\r\n//     //descriptor.enumerable 是否可枚举\r\n//     //descriptor.writable 是否可被重写\r\n//     //descriptor.configurable 是否可被删除\r\n//     //descriptor.value 当前值\r\n//     descriptor.enumerable = isEnum;\r\n//     let original = descriptor.value as any;\r\n//     descriptor.value = function () {\r\n//       console.log(\"prev eat\");\r\n//       return original(...arguments);\r\n//     } as any;\r\n//   };\r\n// }\r\n\r\n// class Animal {\r\n//   @ToUpper(true)\r\n//   public name: string = \"animal\";\r\n// }\r\n// const animal = new Animal();\r\n// animal.eat();\r\n\r\nfunction MyPropertyDecorator(target: any, propertyKey: string | symbol) {\r\n  console.log(\r\n    `${target.toString()} Property ${String(propertyKey)} is being decorated!`\r\n  );\r\n}\r\n\r\nclass MyClass {\r\n  @MyPropertyDecorator\r\n  myProperty: string;\r\n\r\n  constructor(myProperty: string) {\r\n    this.myProperty = myProperty;\r\n  }\r\n}\r\n\r\nfunction ToUpper(isUpper: boolean): PropertyDecorator {\r\n  return function (target, property) {\r\n    //descriptor.enumerable 是否可枚举\r\n    //descriptor.writable 是否可被重写\r\n    //descriptor.configurable 是否可被删除\r\n    //descriptor.value 当前值\r\n    let val = \"\";\r\n    Object.defineProperty(target, property, {\r\n      enumerable: true,\r\n      get() {\r\n        return val.toUpperCase();\r\n      },\r\n      set(newValue) {\r\n        val = newValue;\r\n      },\r\n    });\r\n  };\r\n}\r\nfunction valToUpper(target: any, property: any, descriptor: any) {\r\n  let originalSet = descriptor.set;\r\n  let originalGet = descriptor.get;\r\n  descriptor.set = function (newValue: string) {\r\n    return originalSet.call(this, newValue.toUpperCase());\r\n  };\r\n  descriptor.get = function () {\r\n    return originalGet.call(this) + \"123\";\r\n  };\r\n}\r\n\r\nclass Animal {\r\n  private _val!: string;\r\n  @valToUpper\r\n  get val() {\r\n    return this._val;\r\n  }\r\n  set val(newValue: string) {\r\n    this._val = newValue;\r\n  }\r\n}\r\nconst animal = new Animal();\r\nanimal.val = \"abc\";\r\nconsole.log(animal.val);\r\n\r\n// class Animal {\r\n//   @ToUpper(true)\r\n//   public name: string = \"animal\";\r\n// }\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBA,SAAS,EAAE,CAAC,QAAoC,EAAA;IAC9C,IAAA,IAAI,KAAK,GAAG,IAAI,KAAK,EAAE;IACvB,IAAA,IAAI,GAAG,GAAG,QAAQ,CAAC,KAAK,CAAC;IACzB,IAAA,OAAO,GAAG;IACZ;IAEA,MAAM,MAAM,CAAA;IACV,IAAA,KAAK;IACN;IACD,MAAM,KAAM,SAAQ,MAAM,CAAA;IACxB,IAAA,GAAG;IACJ;IAQD,EAAE,CAAC,CAAC,QAAgB,KAAI;QACtB,QAAQ,CAAC,KAAK,EAAE;QAChB,OAAO,IAAI,KAAK,EAAE;IACpB,CAAC,CAAC;IA2DF;IAEA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IAEA,SAAS,mBAAmB,CAAC,MAAW,EAAE,WAA4B,EAAA;IACpE,IAAA,OAAO,CAAC,GAAG,CACT,CAAA,EAAG,MAAM,CAAC,QAAQ,EAAE,CAAA,UAAA,EAAa,MAAM,CAAC,WAAW,CAAC,CAAA,oBAAA,CAAsB,CAC3E;IACH;IAEA,MAAM,OAAO,CAAA;IAIX,IAAA,WAAA,CAAY,UAAkB,EAAA;IAC5B,QAAA,IAAI,CAAC,UAAU,GAAG,UAAU;;IAE/B;IALC,UAAA,CAAA;QADC;IACkB,CAAA,EAAA,OAAA,CAAA,SAAA,EAAA,YAAA,EAAA,MAAA,CAAA;IAyBrB,SAAS,UAAU,CAAC,MAAW,EAAE,QAAa,EAAE,UAAe,EAAA;IAC7D,IAAA,IAAI,WAAW,GAAG,UAAU,CAAC,GAAG;IAChC,IAAA,IAAI,WAAW,GAAG,UAAU,CAAC,GAAG;IAChC,IAAA,UAAU,CAAC,GAAG,GAAG,UAAU,QAAgB,EAAA;YACzC,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,WAAW,EAAE,CAAC;IACvD,KAAC;QACD,UAAU,CAAC,GAAG,GAAG,YAAA;YACf,OAAO,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,KAAK;IACvC,KAAC;IACH;IAEA,MAAM,MAAM,CAAA;IAGV,IAAA,IAAI,GAAG,GAAA;YACL,OAAO,IAAI,CAAC,IAAI;;QAElB,IAAI,GAAG,CAAC,QAAgB,EAAA;IACtB,QAAA,IAAI,CAAC,IAAI,GAAG,QAAQ;;IAEvB;IANC,UAAA,CAAA;QADC;IAGA,CAAA,EAAA,MAAA,CAAA,SAAA,EAAA,KAAA,EAAA,IAAA,CAAA;IAKH,MAAM,MAAM,GAAG,IAAI,MAAM,EAAE;IAC3B,MAAM,CAAC,GAAG,GAAG,KAAK;IAClB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;IAEvB;IACA;IACA;IACA;;;;;;"}